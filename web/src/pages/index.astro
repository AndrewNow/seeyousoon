---
import Layout from "../layouts/Layout.astro";
import MagneticHero from "../components/Hero/MagneticHero.astro";
import HeroContent from "../components/Hero/HeroContent.astro";
import UpcomingEvents from "../components/UpcomingEvents/UpcomingEvents.astro";
import PastEvents from "../components/PastEvents/PastEvents.astro";

import { getPastEvents } from "../sanity/api";
import Newsletter from "../components/Newsletter.astro";
import About from "../components/About/About.astro";

const pastEventsData = await getPastEvents();
---

<Layout title="Welcome to Astro.">
  <section class="hero" id="magneticHero-wrapper">
    <HeroContent />
    <MagneticHero />
  </section>
  <div class="upcoming-events">
    <UpcomingEvents />
  </div>
  <section class="about">
    <About />
  </section>
  <section class="past-events">
    <PastEvents data={pastEventsData} />
  </section>
  <Newsletter />
</Layout>

<style lang="scss">
  .hero {
    position: relative;
    overflow: hidden;
    width: 100%;
    height: 99vh;
  }

  .past-events {
  }
</style>

<script>
  import marquee from "vanilla-marquee";

  document.addEventListener("DOMContentLoaded", function () {});
</script>
<script>
  import marquee from "vanilla-marquee";

  document.addEventListener("DOMContentLoaded", function () {
    const titleMarquees = document.querySelectorAll("#title-marquee");

    titleMarquees.forEach((el) => {
      new marquee(el, {
        duplicated: true,
        gap: 30,
        speed: 100,
        // pauseOnHover: true,
        startVisible: true,
        recalcResize: true,
      });
    });

    const pastEventsMarquees = document.querySelectorAll("#pastEvents-marquee");
    // Calculate marquee speed based on the number of images
    const calculateMarqueeSpeed = (imageCount) => {
      // Adjust these values as needed to control the speed based on the image count
      const minSpeed = 10; // Lower bound speed
      const maxSpeed = 100; // Upper bound speed

      // Calculate the speed based on the image count
      const calculatedSpeed =
        minSpeed + (maxSpeed - minSpeed) * (imageCount / 10);

      return calculatedSpeed;
    };

    console.log("pastEventsMarquees", pastEventsMarquees);

    pastEventsMarquees.forEach((el) => {
      const marqueeSpeed = calculateMarqueeSpeed(
        el.getAttribute("data-image-count")
      );
      // const imageCount = el.getAttribute("data-image-count");
      console.log("imagecount", marqueeSpeed);
      const speed = marqueeSpeed ? marqueeSpeed : 50;
      new marquee(el, {
        duplicated: true,
        gap: 0,
        speed: speed,
        // pauseOnHover: true,
        startVisible: true,
        // recalcResize: true,
        recalcResize: true,
      });
    });
  });
</script>
