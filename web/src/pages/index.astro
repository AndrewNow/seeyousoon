---
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import image1 from "../assets/landing/sys1.png";
import image2 from "../assets/landing/sys2.png";
import image3 from "../assets/landing/sys3.png";
import image4 from "../assets/landing/sys4.png";
---

<Layout title="Welcome to Astro.">
  <section class="hero">
    <div class="cursor-container">
      <Image
        class="landing-image"
        src={image1}
        alt="image1"
        quality={100}
        id="image1"
      />
      <Image
        class="landing-image"
        src={image2}
        alt="image2"
        quality={100}
        id="image2"
      />
      <Image
        class="landing-image"
        src={image3}
        alt="image3"
        quality={100}
        id="image3"
      />
      <Image
        class="landing-image"
        src={image4}
        alt="image4"
        quality={100}
        id="image4"
      />
    </div>
  </section>
</Layout>

<style>
  .hero {
    position: relative;
    overflow-x: hidden;
    width: 100%;
    height: 99vh;
  }
  .cursor-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: grid;
    place-items: center;
    aspect-ratio: 1738/1232;
    /* border: 1px solid; */
    width: 50%;
    height: auto;
  }

  .landing-image {
    width: 100%;
    height: 100%;
    position: absolute;
  }
</style>

<script>
  // declare lerp function
  const lerp = (current, target, factor) =>
    current * (1 - factor) + target * factor;

  // grab mouse position, update it
  let mousePosition = { x: 0, y: 0 };
  window.addEventListener("mousemove", (e) => {
    mousePosition.x = e.pageX;
    mousePosition.y = e.pageY;
  });

  // calculate distance
  const calculateDistance = (x1, y1, x2, y2) => {
    return Math.hypot(x1 - x2, y1 - y2);
  };

  // create a magnetic object
  class MagneticObject {
    constructor(domElement, { lerp }) {
      this.domElement = domElement;
      this.boundingClientRect = this.domElement.getBoundingClientRect();
      this.triggerArea = 2000;
      this.interpolationFactor = lerp;

      this.lerpingData = {
        x: { current: 0, target: 0 },
        y: { current: 0, target: 0 },
      };

      this.render();
      this.resize();
    }

    resize() {
      window.addEventListener("resize", () => {
        this.boundingClientRect = this.domElement.getBoundingClientRect();
      });
    }

    render() {
      const distanceFromMouseToCenter = calculateDistance(
        mousePosition.x,
        mousePosition.y,
        this.boundingClientRect.left + this.boundingClientRect.width / 2,
        this.boundingClientRect.top + this.boundingClientRect.height / 2
      );

      let targetHolder = { x: 0, y: 0 };

      if (distanceFromMouseToCenter < this.triggerArea) {
        this.domElement.classList.add("focus");
        targetHolder.x =
          (mousePosition.x -
            (this.boundingClientRect.left +
              this.boundingClientRect.width / 2)) *
          0.2;
        targetHolder.y =
          (mousePosition.y -
            (this.boundingClientRect.top +
              this.boundingClientRect.height / 2)) *
          0.2;
      } else {
        this.domElement.classList.remove("focus");
      }
      this.lerpingData["x"].target = targetHolder.x;
      this.lerpingData["y"].target = targetHolder.y;

      for (const item in this.lerpingData) {
        this.lerpingData[item].current = lerp(
          this.lerpingData[item].current,
          this.lerpingData[item].target,
          this.interpolationFactor
        );
      }

      this.domElement.style.transform = `translate(${this.lerpingData["x"].current}px, ${this.lerpingData["y"].current}px)`;

      window.requestAnimationFrame(() => this.render());
    }
  }

  const images = document.querySelectorAll(".landing-image");

  const img1 = document.getElementById("image1");
  const img2 = document.getElementById("image2");
  const img3 = document.getElementById("image3");
  const img4 = document.getElementById("image4");

  if (window.innerWidth > 576) {
    new MagneticObject(img1, { lerp: 0.025 });
    new MagneticObject(img2, { lerp: 0.05 });
    new MagneticObject(img3, { lerp: 0.75 });
    new MagneticObject(img4, { lerp: 0.1 });
  }

  // // don't run this on mobile
  // images.forEach((img) => {
  //   if (window.innerWidth > 576) {
  //     new MagneticObject(img);
  //   }
  // });
</script>
