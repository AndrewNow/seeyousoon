---
// import { Image } from "astro:assets";
const { data } = Astro.props;
---

<div class="cursor-container">
  {
    data &&
      data.images.map((el, i) => {
        const imgSrcLarge = `${el.imageSrc}?w=775&fm=webp&q=80`;
        const imgSrcMedium = `${el.imageSrc}?w=581&fm=webp&q=75`;
        const imgSrcSmall = `${el.imageSrc}?w=380&fm=webp&q=70`;
        return (
          <div class="landing-image-wrapper" id={`image${i + 1}`}>
            <img
              id={`el${i + 1}`}
              class="landing-image"
              src={imgSrcSmall} 
              srcset={`${imgSrcSmall} 380w, ${imgSrcMedium} 581w, ${imgSrcLarge} 775w`}
              alt={el.altText || "Hero image"}
              width="856"
              height="608"
              sizes="(max-width: 576px) 380px, (max-width: 1080px) 581px, 775px"
              loading={"eager"}
              decoding={"sync" }
              fetchpriority={"high" }
            />
          </div>
        );
      })
  }
</div>

<style lang="scss" is:global>
  .cursor-container {
    z-index: 2;
    position: absolute;
    top: 0;
    left: 0;
    display: grid;
    place-items: center;
    aspect-ratio: 1738/1232;
    width: 100%;
    height: 100%;
    will-change: transform;
  }

  .landing-image-wrapper {
    position: absolute;
    will-change: transform;
    aspect-ratio: 856/608;
    width: 45%;
    max-width: 775px;
    height: auto;
    width: 100%;
    --radius: 3px;
    transform: translate3d(0, 0, 0); /* Force GPU acceleration */
  }
  
  .landing-image {
    width: 100%;
    height: 100%;
    opacity: 0;
    transform: translate3d(0, 0, 0); /* Force GPU acceleration */
    backface-visibility: hidden; /* Prevent flickering */
  }

  #el1 {
    animation: scaleAnimation 1s ease forwards 0s;
  }

  #el2 {
    animation: scaleAnimation 1s ease forwards 0.15s;
  }

  #el3 {
    animation: scaleAnimation 1s ease forwards 0.3s;
  }

  #el4 {
    animation: scaleAnimation 1s ease forwards 0.45s;
  }

  @media (max-width: 1500px) {
    .landing-image-wrapper {
      width: 45%;
    }
  }
  @media (max-width: 1080px) {
    .landing-image-wrapper {
      width: 70%;
      max-width: 581px;
    }
  }
  @media (max-width: 768px) {
    .landing-image-wrapper {
      width: 90%;
      max-width: 380px;
    }
  }
</style>

<script>
  import { animate, inView } from "motion";
  
  // Only run the magnetic effect on desktop devices
  if (window.innerWidth > 1080 && !("ontouchstart" in window || navigator.maxTouchPoints > 0)) {
    // Defer magnetic effect initialization until after page load
    document.addEventListener("DOMContentLoaded", () => {
      const cursorContainer = document.getElementById("magneticHero-wrapper");
      const container = document.querySelector(".cursor-container");
      
      // Use passive event listeners for better performance
      let mousePosition = {
        x: cursorContainer.offsetWidth / 2,
        y: cursorContainer.offsetHeight / 2,
      };
      
      let isCursorInsideContainer = true;
      let animationFrameId = null;
      let shouldRender = true;
      
      // Throttle mousemove events
      let lastMouseMoveTime = 0;
      const THROTTLE_DELAY = 10; // ms
      
      cursorContainer.addEventListener("mousemove", (e) => {
        const now = performance.now();
        if (now - lastMouseMoveTime < THROTTLE_DELAY) return;
        lastMouseMoveTime = now;
        
        const containerRect = container.getBoundingClientRect();
        mousePosition.x = Math.max(
          containerRect.left,
          Math.min(containerRect.right, e.clientX)
        );
        mousePosition.y = Math.max(
          containerRect.top,
          Math.min(containerRect.bottom, e.clientY)
        );
      }, { passive: true });
      
      cursorContainer.addEventListener("mouseenter", () => {
        isCursorInsideContainer = true;
      }, { passive: true });
      
      cursorContainer.addEventListener("mouseleave", () => {
        isCursorInsideContainer = false;
      }, { passive: true });
      
      const lerp = (current, target, factor) =>
        current * (1 - factor) + target * factor;
      
      const calculateDistance = (x1, y1, x2, y2) => Math.hypot(x1 - x2, y1 - y2);
      
      class MagneticObject {
        constructor(domElement, { lerp, recenterLerp }) {
          this.imageElement = domElement;
          this.triggerArea = 2000;
          this.lerpFactor = lerp;
          this.recenterLerpFactor = recenterLerp;
          this.isRecentering = false;
          this.isInView = false;
          
          this.lerpingData = {
            x: { current: 0, target: 0 },
            y: { current: 0, target: 0 },
          };
          
          // Use a single shared observer for all instances
          if (!MagneticObject.resizeObserver) {
            MagneticObject.resizeObserver = new ResizeObserver((entries) => {
              entries.forEach(entry => {
                const target = entry.target;
                if (target._magneticObject) {
                  target._magneticObject.boundingClientRect = target.getBoundingClientRect();
                }
              });
            });
          }
          
          this.imageElement._magneticObject = this;
          
          // Use IntersectionObserver to only animate when in view
          const intersectionOptions = {
            root: null,
            rootMargin: "100px",
            threshold: 0.1,
          };
          
          this.intersectionObserver = new IntersectionObserver((entries) => {
            this.isInView = entries[0].isIntersecting;
          }, intersectionOptions);
        }
        
        resize() {
          MagneticObject.resizeObserver.observe(this.imageElement);
          this.intersectionObserver.observe(this.imageElement);
          this.boundingClientRect = this.imageElement.getBoundingClientRect();
        }
        
        render() {
          if (!shouldRender || !this.isInView) return;
          
          const { left, width, top, height } = this.boundingClientRect || {};
          if (!left || !width || !top || !height) return;
          
          const distanceFromMouseToCenter = calculateDistance(
            mousePosition.x,
            mousePosition.y,
            left + width / 2,
            top + height / 2
          );
          
          let targetHolder = { x: 0, y: 0 };
          
          if (
            isCursorInsideContainer &&
            distanceFromMouseToCenter < this.triggerArea
          ) {
            targetHolder.x = (mousePosition.x - (left + width / 2)) * 0.3;
            targetHolder.y = (mousePosition.y - (top + height / 2)) * 0.35;
            
            if (this.isRecentering) {
              this.isRecentering = false;
              this.lerpingData.x.current = targetHolder.x;
              this.lerpingData.y.current = targetHolder.y;
            }
          } else {
            if (!isCursorInsideContainer && !this.isRecentering) {
              this.isRecentering = true;
              targetHolder.x = 0;
              targetHolder.y = 0;
            }
          }
          
          this.lerpingData.x.target = targetHolder.x;
          this.lerpingData.y.target = targetHolder.y;
          
          // Only update if there's a significant change
          const xDiff = Math.abs(this.lerpingData.x.current - this.lerpingData.x.target);
          const yDiff = Math.abs(this.lerpingData.y.current - this.lerpingData.y.target);
          
          if (xDiff > 0.1 || yDiff > 0.1) {
            for (const item in this.lerpingData) {
              this.lerpingData[item].current = lerp(
                this.lerpingData[item].current,
                this.lerpingData[item].target,
                isCursorInsideContainer ? this.lerpFactor : this.recenterLerpFactor
              );
            }
            
            // Use transform3d for GPU acceleration
            this.imageElement.style.transform = `translate3d(${this.lerpingData.x.current}px, ${this.lerpingData.y.current}px, 0)`;
          }
        }
        
        initialize() {
          this.resize();
        }
        
        pauseAnimation() {
          this.imageElement.style.transform = "translate3d(0, 0, 0)";
          this.lerpingData.x.current = 0;
          this.lerpingData.y.current = 0;
        }
        
        resumeAnimation() {
          this.imageElement.style.transform = "translate3d(0, 0, 0)";
          this.lerpingData.x.current = 0;
          this.lerpingData.y.current = 0;
        }
      }
      
      // Static property for shared observer
      MagneticObject.resizeObserver = null;
      
      // Use inView with a proper callback
      inView(cursorContainer, (entry) => {
        if (entry.isIntersecting) {
          // Only initialize if not already done
          if (!window.magneticObjectsInitialized) {
            const img1 = document.getElementById("image1");
            const img2 = document.getElementById("image2");
            const img3 = document.getElementById("image3");
            const img4 = document.getElementById("image4");
            
            const magneticObjects = [
              new MagneticObject(img1, { lerp: 0.025, recenterLerp: 0.015 }),
              new MagneticObject(img2, { lerp: 0.5, recenterLerp: 0.015 }),
              new MagneticObject(img3, { lerp: 0.05, recenterLerp: 0.015 }),
              new MagneticObject(img4, { lerp: 0.1, recenterLerp: 0.015 }),
            ];
            
            magneticObjects.forEach((obj) => {
              obj.initialize();
            });
            
            // Use a single requestAnimationFrame for all objects
            function renderAll() {
              if (shouldRender) {
                magneticObjects.forEach(obj => obj.render());
                animationFrameId = requestAnimationFrame(renderAll);
              }
            }
            
            renderAll();
            window.magneticObjectsInitialized = true;
          } else {
            // Resume animation if already initialized
            shouldRender = true;
            if (!animationFrameId) {
              renderAll();
            }
          }
        } else {
          // Pause animation when out of view
          shouldRender = false;
          if (animationFrameId) {
            cancelAnimationFrame(animationFrameId);
            animationFrameId = null;
          }
        }
      }, { margin: "200px" });
    });
  } else if (window.innerWidth <= 1080) {
    // Mobile animation code (existing)
    const imageMobileAnimation = document.querySelectorAll(".landing-image-wrapper");
    
    imageMobileAnimation.forEach((img, i) => {
      animate(
        img,
        {
          transform: [
            "translate(calc(cos(11.25deg) * 3px), calc(sin(11.25deg) * 3px)) scale(1)",
            "translate(calc(cos(22.5deg) * 3px), calc(sin(22.5deg) * 3px)) scale(1)",
            "translate(calc(cos(45deg) * 3px), calc(sin(45deg) * 3px)) scale(1)",
            "translate(calc(cos(67.5deg) * 3px), calc(sin(67.5deg) * 3px)) scale(1)",
            "translate(calc(cos(90deg) * 3px), calc(sin(90deg) * 3px)) scale(1)",
            "translate(calc(cos(112.5deg) * 3px), calc(sin(112.5deg) * 3px)) scale(1)",
            "translate(calc(cos(135deg) * 3px), calc(sin(135deg) * 3px)) scale(1)",
            "translate(calc(cos(157.5deg) * 3px), calc(sin(157.5deg) * 3px)) scale(1)",
            "translate(calc(cos(180deg) * 3px), calc(sin(180deg) * 3px)) scale(1)",
            "translate(calc(cos(202.5deg) * 3px), calc(sin(202.5deg) * 3px)) scale(1)",
            "translate(calc(cos(225deg) * 3px), calc(sin(225deg) * 3px)) scale(1)",
            "translate(calc(cos(247.5deg) * 3px), calc(sin(247.5deg) * 3px)) scale(1)",
            "translate(calc(cos(270deg) * 3px), calc(sin(270deg) * 3px)) scale(1)",
            "translate(calc(cos(292.5deg) * 3px), calc(sin(292.5deg) * 3px)) scale(1)",
            "translate(calc(cos(315deg) * 3px), calc(sin(315deg) * 3px)) scale(1)",
            "translate(calc(cos(337.5deg) * 3px), calc(sin(337.5deg) * 3px)) scale(1)",
            "translate(calc(cos(360deg) * 3px), calc(sin(360deg) * 3px)) scale(1)",
          ],
        },
        {
          delay: 1.25,
          duration: i + 2,
          repeat: Infinity,
          easing: "linear",
        }
      );
    });
  }
</script>
