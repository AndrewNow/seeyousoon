---
import { Image } from "astro:assets";
import image1 from "../../assets/landing/syshero1.png";
import image2 from "../../assets/landing/syshero2.png";
import image3 from "../../assets/landing/syshero3.png";
import image4 from "../../assets/landing/syshero4.png";
---

<div class="cursor-container">
  <Image
    format="webp"
    class="landing-image"
    src={image4}
    alt="image4"
    quality={100}
    id="image4"
  />
  <Image
    format="webp"
    class="landing-image"
    src={image3}
    alt="image3"
    quality={100}
    id="image3"
  />
  <Image
    format="webp"
    class="landing-image"
    src={image2}
    alt="image2"
    quality={100}
    id="image2"
  />
  <Image
    format="webp"
    class="landing-image"
    src={image1}
    alt="image1"
    quality={100}
    id="image1"
  />
</div>

<style lang="scss">
  @keyframes float {
    0% {
      transform: translate(
        calc(cos(0deg) * var(--radius)),
        calc(sin(0deg) * var(--radius))
      );
    }
    6% {
      transform: translate(
        calc(cos(22.5deg) * var(--radius)),
        calc(sin(22.5deg) * var(--radius))
      );
    }
    12% {
      transform: translate(
        calc(cos(45deg) * var(--radius)),
        calc(sin(45deg) * var(--radius))
      );
    }
    18% {
      transform: translate(
        calc(cos(67.5deg) * var(--radius)),
        calc(sin(67.5deg) * var(--radius))
      );
    }
    25% {
      transform: translate(
        calc(cos(90deg) * var(--radius)),
        calc(sin(90deg) * var(--radius))
      );
    }
    31% {
      transform: translate(
        calc(cos(112.5deg) * var(--radius)),
        calc(sin(112.5deg) * var(--radius))
      );
    }
    37% {
      transform: translate(
        calc(cos(135deg) * var(--radius)),
        calc(sin(135deg) * var(--radius))
      );
    }
    43% {
      transform: translate(
        calc(cos(157.5deg) * var(--radius)),
        calc(sin(157.5deg) * var(--radius))
      );
    }
    50% {
      transform: translate(
        calc(cos(180deg) * var(--radius)),
        calc(sin(180deg) * var(--radius))
      );
    }
    56% {
      transform: translate(
        calc(cos(202.5deg) * var(--radius)),
        calc(sin(202.5deg) * var(--radius))
      );
    }
    62% {
      transform: translate(
        calc(cos(225deg) * var(--radius)),
        calc(sin(225deg) * var(--radius))
      );
    }
    68% {
      transform: translate(
        calc(cos(247.5deg) * var(--radius)),
        calc(sin(247.5deg) * var(--radius))
      );
    }
    75% {
      transform: translate(
        calc(cos(270deg) * var(--radius)),
        calc(sin(270deg) * var(--radius))
      );
    }
    81% {
      transform: translate(
        calc(cos(292.5deg) * var(--radius)),
        calc(sin(292.5deg) * var(--radius))
      );
    }
    87% {
      transform: translate(
        calc(cos(315deg) * var(--radius)),
        calc(sin(315deg) * var(--radius))
      );
    }
    93% {
      transform: translate(
        calc(cos(337.5deg) * var(--radius)),
        calc(sin(337.5deg) * var(--radius))
      );
    }
    100% {
      transform: translate(
        calc(cos(360deg) * var(--radius)),
        calc(sin(360deg) * var(--radius))
      );
    }
  }

  .cursor-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: grid;
    place-items: center;
    aspect-ratio: 1738/1232;
    width: 100%;
    height: 100%;
    // height: auto;
    // overflow: hidden;
  }

  .landing-image {
    width: 45%;
    height: auto;
    position: absolute;
    --radius: 3px; // animation for mobile
  }

  @media (max-width: 768px) {
    .landing-image {
      width: 90%;
    }

    #image1 {
      animation: float 2s linear infinite;
    }
    #image2 {
      animation: float 3s linear infinite;
      animation-delay: 0.25s;
    }
    #image3 {
      animation: float 4s linear infinite;
      animation-delay: 0.5s;
    }
    #image4 {
      animation: float 5s linear infinite;
      animation-delay: 0.75s;
    }
  }
</style>

<script>
  // declare lerp function
  const lerp = (current, target, factor) =>
    current * (1 - factor) + target * factor;

  const cursorContainer = document.getElementById("magneticHero-wrapper");

  let isCursorInsideContainer = true;
  // Event listener for mouseenter
  cursorContainer.addEventListener("mouseenter", () => {
    isCursorInsideContainer = true;
  });
  // Event listener for mouseleave
  cursorContainer.addEventListener("mouseleave", () => {
    isCursorInsideContainer = false;
  });

  // grab mouse pos
  let mousePosition = { x: 0, y: 0 };

  // update mouse pos
  window.addEventListener("mousemove", (e) => {
    // // previous logic
    // mousePosition.x = e.clientX;
    // mousePosition.y = e.clientY;
    const container = document.querySelector(".cursor-container");
    const containerRect = container.getBoundingClientRect();

    mousePosition.x = Math.max(
      containerRect.left,
      Math.min(containerRect.right, e.clientX)
    );
    mousePosition.y = Math.max(
      containerRect.top,
      Math.min(containerRect.bottom, e.clientY)
    );
  });

  // calculate distance
  const calculateDistance = (x1, y1, x2, y2) => {
    return Math.hypot(x1 - x2, y1 - y2);
  };

  // create a magnetic object
  class MagneticObject {
    constructor(domElement, { lerp, recenterLerp }) {
      this.imageElement = domElement;
      this.triggerArea = 2000;
      this.lerpFactor = lerp;
      this.recenterLerpFactor = recenterLerp;

      this.lerpingData = {
        x: { current: 0, target: 0 },
        y: { current: 0, target: 0 },
      };

      this.resizeObserver = new ResizeObserver(() => {
        this.boundingClientRect = this.imageElement.getBoundingClientRect();
      });
    }

    resize() {
      this.resizeObserver.observe(this.imageElement);
    }

    render() {
      const { left, width, top, height } = this.boundingClientRect || {};
      const distanceFromMouseToCenter = calculateDistance(
        mousePosition.x,
        mousePosition.y,
        left + width / 2,
        top + height / 2
      );

      let targetHolder = { x: 0, y: 0 };

      let LERP_FACTOR = isCursorInsideContainer
        ? this.lerpFactor
        : this.recenterLerpFactor;

      if (
        isCursorInsideContainer &&
        distanceFromMouseToCenter < this.triggerArea
      ) {
        this.imageElement.classList.add("focus");

        targetHolder.x = (mousePosition.x - (left + width / 2)) * 0.2;
        targetHolder.y = (mousePosition.y - (top + height / 2)) * 0.2;
      } else {
        this.imageElement.classList.remove("focus");

        targetHolder.x = 0;
        targetHolder.y = 0;
      }

      this.lerpingData["x"].target = targetHolder.x;
      this.lerpingData["y"].target = targetHolder.y;

      for (const item in this.lerpingData) {
        this.lerpingData[item].current = lerp(
          this.lerpingData[item].current,
          this.lerpingData[item].target,
          LERP_FACTOR
        );
      }

      if (
        this.lerpingData.x.current !== 0 ||
        this.lerpingData.y.current !== 0
      ) {
        this.imageElement.style.transform = `translate(${this.lerpingData.x.current}px, ${this.lerpingData.y.current}px)`;
      }

      this.resizeObserver.observe(this.imageElement);

      requestAnimationFrame(() => this.render());
    }
    initialize() {
      this.render();
      this.resize();
    }
  }

  const img1 = document.getElementById("image1");
  const img2 = document.getElementById("image2");
  const img3 = document.getElementById("image3");
  const img4 = document.getElementById("image4");

  // don't run this on mobile
  // Check if the device supports touch events
  const isTouchDevice =
    "ontouchstart" in window ||
    navigator.maxTouchPoints > 0 ||
    navigator.msMaxTouchPoints > 0;

  if (window.innerWidth > 576 || !isTouchDevice) {
    new MagneticObject(img4, { lerp: 0.025, recenterLerp: 0.05 }).initialize();
    new MagneticObject(img3, { lerp: 0.05, recenterLerp: 0.05 }).initialize();
    new MagneticObject(img2, { lerp: 0.5, recenterLerp: 0.05 }).initialize();
    new MagneticObject(img1, { lerp: 0.1, recenterLerp: 0.05 }).initialize();
  }
</script>
