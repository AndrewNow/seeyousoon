---
// import { Image } from "astro:assets";
const { data } = Astro.props;
---

<div class="cursor-container">
  {
    data &&
      data.images.map((el, i) => {
        const imgSrcLarge = `${el.imageSrc}?w=775&fm=webp`;
        const imgSrcMedium = `${el.imageSrc}?w=581&fm=webp`;
        const imgSrcSmall = `${el.imageSrc}?w=380&fm=webp`;
        return (
          <div class="landing-image-wrapper" id={`image${i + 1}`}>
            <img
              id={`el${i + 1}`}
              class="landing-image"
              src={el.imageSrc}
              srcset={`${imgSrcLarge}, ${imgSrcMedium}, ${imgSrcSmall}`}
              alt=""
              quality={70}
              width="856"
              height="608"
              widths={[380, 581, 775]}
              sizes={`(max-width: 576px) 380px, (max-width: 1080px) 581px, (max-width: 1500px) 775px`}
              decoding="async"
              loading="lazy"
            />
          </div>
        );
      })
  }
</div>

<style lang="scss" is:global>
  .cursor-container {
    z-index: 2;
    position: absolute;
    top: 0;
    left: 0;
    display: grid;
    place-items: center;
    aspect-ratio: 1738/1232;
    width: 100%;
    height: 100%;
  }

  .landing-image-wrapper {
    position: absolute;
    will-change: transform;
    aspect-ratio: 856/608;
    width: 45%;
    max-width: 775px;
    height: auto;
    width: 100%;
    --radius: 3px;
  }
  .landing-image-animation {
    will-change: transform;
    width: 100%;
    height: 100%;
  }
  .landing-image {
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  #el1 {
    animation: scaleAnimation 1s ease forwards 0s;
  }

  #el2 {
    animation: scaleAnimation 1s ease forwards 0.15s;
  }

  #el3 {
    animation: scaleAnimation 1s ease forwards 0.3s;
  }

  #el4 {
    animation: scaleAnimation 1s ease forwards 0.45s;
  }

  @media (max-width: 1500px) {
    .landing-image-wrapper {
      width: 45%;
    }
  }
  @media (max-width: 1080px) {
    .landing-image-wrapper {
      width: 70%;
      max-width: 581px;
    }
  }
  @media (max-width: 768px) {
    .landing-image-wrapper {
      width: 90%;
      max-width: 380px;
    }
  }
</style>

<script>
  import { animate, inView } from "motion";
  const imageMobileAnimation = document.querySelectorAll(
    ".landing-image-wrapper"
  );

  if (window.innerWidth <= 1080) {
    imageMobileAnimation.forEach((img, i) => {
      animate(
        img,
        {
          transform: [
            "translate(calc(cos(11.25deg) * 3px), calc(sin(11.25deg) * 3px)) scale(1)",
            "translate(calc(cos(22.5deg) * 3px), calc(sin(22.5deg) * 3px)) scale(1)",
            "translate(calc(cos(45deg) * 3px), calc(sin(45deg) * 3px)) scale(1)",
            "translate(calc(cos(67.5deg) * 3px), calc(sin(67.5deg) * 3px)) scale(1)",
            "translate(calc(cos(90deg) * 3px), calc(sin(90deg) * 3px)) scale(1)",
            "translate(calc(cos(112.5deg) * 3px), calc(sin(112.5deg) * 3px)) scale(1)",
            "translate(calc(cos(135deg) * 3px), calc(sin(135deg) * 3px)) scale(1)",
            "translate(calc(cos(157.5deg) * 3px), calc(sin(157.5deg) * 3px)) scale(1)",
            "translate(calc(cos(180deg) * 3px), calc(sin(180deg) * 3px)) scale(1)",
            "translate(calc(cos(202.5deg) * 3px), calc(sin(202.5deg) * 3px)) scale(1)",
            "translate(calc(cos(225deg) * 3px), calc(sin(225deg) * 3px)) scale(1)",
            "translate(calc(cos(247.5deg) * 3px), calc(sin(247.5deg) * 3px)) scale(1)",
            "translate(calc(cos(270deg) * 3px), calc(sin(270deg) * 3px)) scale(1)",
            "translate(calc(cos(292.5deg) * 3px), calc(sin(292.5deg) * 3px)) scale(1)",
            "translate(calc(cos(315deg) * 3px), calc(sin(315deg) * 3px)) scale(1)",
            "translate(calc(cos(337.5deg) * 3px), calc(sin(337.5deg) * 3px)) scale(1)",
            "translate(calc(cos(360deg) * 3px), calc(sin(360deg) * 3px)) scale(1)",
          ],
        },
        {
          delay: 1.25,
          duration: i + 2,
          repeat: Infinity,
          easing: "linear",
        }
      );
    });
  }

  const lerp = (current, target, factor) =>
    current * (1 - factor) + target * factor;

  const cursorContainer = document.getElementById("magneticHero-wrapper");
  let isCursorInsideContainer = true;
  let shouldRender = true; // Added variable to control rendering

  cursorContainer.addEventListener("mouseenter", () => {
    isCursorInsideContainer = true;
  });

  cursorContainer.addEventListener("mouseleave", () => {
    isCursorInsideContainer = false;
  });

  let mousePosition = {
    x: cursorContainer.offsetWidth / 2,
    y: cursorContainer.offsetHeight / 2,
  }; // Initialize mouse position to the center

  cursorContainer.addEventListener("mousemove", (e) => {
    const container = document.querySelector(".cursor-container");
    const containerRect = container.getBoundingClientRect();

    mousePosition.x = Math.max(
      containerRect.left,
      Math.min(containerRect.right, e.clientX)
    );
    mousePosition.y = Math.max(
      containerRect.top,
      Math.min(containerRect.bottom, e.clientY)
    );
    // console.log(mousePosition.x, mousePosition.y);
  });

  const calculateDistance = (x1, y1, x2, y2) => Math.hypot(x1 - x2, y1 - y2);
  class MagneticObject {
    constructor(domElement, { lerp, recenterLerp }) {
      this.imageElement = domElement;
      this.triggerArea = 2000;
      this.lerpFactor = lerp;
      this.recenterLerpFactor = recenterLerp;
      this.isRecentering = false;

      this.lerpingData = {
        x: { current: 0, target: 0 },
        y: { current: 0, target: 0 },
      };

      this.resizeObserver = new ResizeObserver(() => {
        this.boundingClientRect = this.imageElement.getBoundingClientRect();
      });

      const intersectionOptions = {
        root: null,
        rootMargin: "0px",
        threshold: 0,
      };

      this.intersectionObserver = new IntersectionObserver((entries) => {
        const isInView = entries[0].isIntersecting;
        if (!isInView) {
          this.pauseAnimation();
        } else {
          this.resumeAnimation();
        }
      }, intersectionOptions);
    }

    resize() {
      this.resizeObserver.observe(this.imageElement);
      this.intersectionObserver.observe(cursorContainer);
    }

    render() {
      if (!shouldRender) return;

      const { left, width, top, height } = this.boundingClientRect || {};
      const distanceFromMouseToCenter = calculateDistance(
        mousePosition.x,
        mousePosition.y,
        left + width / 2,
        top + height / 2
      );

      let targetHolder = { x: 0, y: 0 };

      if (
        isCursorInsideContainer &&
        distanceFromMouseToCenter < this.triggerArea
      ) {
        targetHolder.x = (mousePosition.x - (left + width / 2)) * 0.3;
        targetHolder.y = (mousePosition.y - (top + height / 2)) * 0.35;

        if (this.isRecentering) {
          this.isRecentering = false;
          this.lerpingData.x.current = targetHolder.x;
          this.lerpingData.y.current = targetHolder.y;
        }
      } else {
        if (!isCursorInsideContainer && !this.isRecentering) {
          this.isRecentering = true;

          targetHolder.x = 0;
          targetHolder.y = 0;
        }
      }

      this.lerpingData.x.target = targetHolder.x;
      this.lerpingData.y.target = targetHolder.y;

      for (const item in this.lerpingData) {
        this.lerpingData[item].current = lerp(
          this.lerpingData[item].current,
          this.lerpingData[item].target,
          isCursorInsideContainer ? this.lerpFactor : this.recenterLerpFactor
        );
      }

      if (
        this.lerpingData.x.current !== 0 ||
        this.lerpingData.y.current !== 0
      ) {
        this.imageElement.style.transform = `translate3d(${this.lerpingData.x.current}px, ${this.lerpingData.y.current}px, 0)`;
      }

      this.resizeObserver.observe(this.imageElement);
      this.intersectionObserver.observe(cursorContainer);

      requestAnimationFrame(() => this.render());
    }

    initialize() {
      this.render();
      this.resize();
    }

    pauseAnimation() {
      shouldRender = false;
      this.imageElement.style.transform = "translate3d(0, 0, 0)";
      this.lerpingData.x.current = 0;
      this.lerpingData.y.current = 0;
    }

    resumeAnimation() {
      shouldRender = true;
      this.imageElement.style.transform = "translate3d(0, 0, 0)";
      this.lerpingData.x.current = 0;
      this.lerpingData.y.current = 0;
      requestAnimationFrame(() => this.render());
    }
  }

  const img1 = document.getElementById("image1");
  const img2 = document.getElementById("image2");
  const img3 = document.getElementById("image3");
  const img4 = document.getElementById("image4");

  const isTouchDevice =
    "ontouchstart" in window ||
    navigator.maxTouchPoints > 0 ||
    navigator.msMaxTouchPoints > 0;

  document.addEventListener("DOMContentLoaded", () => {
    inView(cursorContainer, () => {
      // console.log("container in view");
      setTimeout(() => {
        if (window.innerWidth >= 1080 || !isTouchDevice) {
          const magneticObjects = [
            new MagneticObject(img1, { lerp: 0.025, recenterLerp: 0.015 }),
            new MagneticObject(img2, { lerp: 0.5, recenterLerp: 0.015 }),
            new MagneticObject(img3, { lerp: 0.05, recenterLerp: 0.015 }),
            new MagneticObject(img4, { lerp: 0.1, recenterLerp: 0.015 }),
          ];

          magneticObjects.forEach((obj) => {
            obj.initialize();
          });
        }
      }, 550);
    });
  });
</script>
