---
import { Image } from "astro:assets";

const { data } = Astro.props;
---

<div class="cursor-container">
  {
    data.images.map((el, i) => {
      const imgSrcLarge = `${el.imageSrc}?w=856&fm=webp`;
      const imgSrcMedium = `${el.imageSrc}?w=581&fm=webp`;
      const imgSrcSmall = `${el.imageSrc}?w=380&fm=webp`;
      return (
        <div class="landing-image-wrapper" id={`image${i + 1}`}>
          <div class="landing-image-animation">
            <Image
              class="landing-image"
              src={imgSrcLarge}
              srcset={`${imgSrcLarge}, ${imgSrcMedium}, ${imgSrcSmall}`}
              alt=""
              quality={15}
              width="856"
              height="608"
              widths={[380, 581, 856]}
              sizes={`(max-width: 576px) 380px, (max-width: 720px) 581px, (max-width: 1600px) 856px`}
              decoding="async"
              loading="lazy"
            />
          </div>
        </div>
      );
    })
  }
</div>

<style lang="scss">
  .cursor-container {
    z-index: 2;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    // transform: translate(-50%, -50%);
    display: grid;
    place-items: center;
    aspect-ratio: 1738/1232;
    width: 100%;
    height: 100%;
  }

  .landing-image-wrapper {
    position: absolute;
    will-change: transform;
    background: #fff99f94;
    outline: 1px solid;
  }
  .landing-image-animation {
    will-change: transform;
    width: 100%;
    height: 100%;
    // opacity: 0;
  }
  .landing-image {
    aspect-ratio: 856/608;
    width: 45%;
    max-width: 856px;
    max-height: 608px;
    height: auto;
    width: 100%;
    --radius: 3px;

    opacity: 0;
    transform: scale(0);
  }

  @media (max-width: 1440px) {
    .landing-image-wrapper {
      width: 55%;
    }
  }
  @media (max-width: 992px) {
    .landing-image-wrapper {
      width: 70%;
      max-width: 581px;
    }
  }
  @media (max-width: 768px) {
    .landing-image-wrapper {
      width: 90%;
      max-width: 380px;
    }
  }
</style>

<script>
  import { animate, spring } from "motion";

  const landingImages = document.querySelectorAll(".landing-image");

  landingImages.forEach((layer, i) => {
    animate(
      layer,
      {
        opacity: 1,
        transform: `scale(1)`,
      },
      {
        duration: 0.36,
        delay: i * 0.15,
        easing: spring({ stiffness: 30, damping: 10 }),
      }
    );
  });

  const landingImageAnimation = document.querySelectorAll(
    ".landing-image-animation"
  );

  if (window.innerWidth <= 576) {
    landingImageAnimation.forEach((img, i) => {
      animate(
        img,
        {
          transform: [
            "translate(calc(cos(11.25deg) * 3px), calc(sin(11.25deg) * 3px))",
            "translate(calc(cos(22.5deg) * 3px), calc(sin(22.5deg) * 3px))",
            "translate(calc(cos(45deg) * 3px), calc(sin(45deg) * 3px))",
            "translate(calc(cos(67.5deg) * 3px), calc(sin(67.5deg) * 3px))",
            "translate(calc(cos(90deg) * 3px), calc(sin(90deg) * 3px))",
            "translate(calc(cos(112.5deg) * 3px), calc(sin(112.5deg) * 3px))",
            "translate(calc(cos(135deg) * 3px), calc(sin(135deg) * 3px))",
            "translate(calc(cos(157.5deg) * 3px), calc(sin(157.5deg) * 3px))",
            "translate(calc(cos(180deg) * 3px), calc(sin(180deg) * 3px))",
            "translate(calc(cos(202.5deg) * 3px), calc(sin(202.5deg) * 3px))",
            "translate(calc(cos(225deg) * 3px), calc(sin(225deg) * 3px))",
            "translate(calc(cos(247.5deg) * 3px), calc(sin(247.5deg) * 3px))",
            "translate(calc(cos(270deg) * 3px), calc(sin(270deg) * 3px))",
            "translate(calc(cos(292.5deg) * 3px), calc(sin(292.5deg) * 3px))",
            "translate(calc(cos(315deg) * 3px), calc(sin(315deg) * 3px))",
            "translate(calc(cos(337.5deg) * 3px), calc(sin(337.5deg) * 3px))",
            "translate(calc(cos(360deg) * 3px), calc(sin(360deg) * 3px))",
          ],
        },
        {
          delay: 1,
          duration: i + 2,
          repeat: Infinity,
          easing: "linear",
        }
      );
    });
  }
</script>
