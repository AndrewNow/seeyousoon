---
const { data } = Astro.props;
const startDate = JSON.stringify(data.dateStart);
const endDate = JSON.stringify(data.dateEnd);
const eventTitle = JSON.stringify(data.title);
---

<div class="desktop-toast-wrapper" id="toastWrapper">
  <small id="eventStatus">
    Join us at <span class="event-toast-title">{data.title}</span> in
  </small>
  <p
    class="countdown"
    data-startDate={startDate}
    data-endDate={endDate}
    data-eventTitle={eventTitle}
  >
  </p>
  {
    data.eventLink ? (
      <a
        href={data.eventLink}
        class="reserve-btn"
        target="_blank"
        rel="noreferrer"
      >
        <p>Reserve</p>
      </a>
    ) : (
      <a class="reserve-btn no-link">
        <p>Coming soon!</p>
      </a>
    )
  }
  <button class="toast-close" id="closeToast" aria-label="Close toast"
    ><svg
      width="18"
      height="19"
      viewBox="0 0 18 19"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M13.5 4.76172L4.5 13.7617"
        stroke="#8D8D8D"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
      <path
        d="M4.5 4.76172L13.5 13.7617"
        stroke="#8D8D8D"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<style lang="scss" is:global>
  .desktop-toast-wrapper {
    transform: translateX(25vw);
    opacity: 0;
    min-width: 450px;
    background: var(--brown-200);
    color: var(--beige-300);
    padding: 1rem;
    border-radius: 8px;
    small {
      color: var(--grey-200);
    }
  }
  .event-toast-title {
    color: var(--grey-100);
    font-family: "Denim-Medium";
  }
  .countdown {
    padding-top: 0.25rem;
    font-variant-numeric: tabular-nums;
  }
  .reserve-btn {
    position: relative;
    display: grid;
    place-items: center;
    height: 60px;
    width: 100%;
    text-align: center;
    margin-top: 1rem;
    border-radius: 4px;
    border: 1px solid var(--grey-100);
    background: var(--beige-100);
    color: var(--brown-300);
    text-decoration: none;
    overflow: hidden;
    font-family: "Denim-Regular";
    p {
      padding: 1rem 0;
      transition: all 0.4s ease;
      color: var(--brown-300);
    }
  }
  .reserve-btn.no-link {
    background: #4e4941;
    border: var(--brown-100);
    cursor: not-allowed;
    p {
      color: var(--grey-200);
    }
  }
  .reserve-btn.no-link:hover {
    p {
      transform: none;
      opacity: 1;
      color: var(--grey-200);
    }
  }
  .reserve-btn.no-link:after {
    content: "";
  }
  .reserve-btn:after {
    padding: 1rem 0;
    transition: all 0.4s ease;
    content: "Reserve";
    position: absolute;
    width: 100%;
    text-align: center;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 250%);
    font-family: "Denim-Regular";
    font-size: 20px;
    line-height: 130%;
  }
  .reserve-btn:hover {
    p {
      opacity: 0;
      transform: translateY(-150%);
      color: var(--beige-300);
    }
  }
  .reserve-btn:hover:after {
    transform: translate(-50%, -50%);
  }

  .toast-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: unset;
    outline: unset;
    border: unset;
    color: var(--grey-300);
    cursor: pointer;
  }

  @media (max-width: 576px) {
    .desktop-toast-wrapper {
      display: none;
    }
  }
</style>

<script>
  import { animate } from "motion";
  const wrapper = document.querySelector(".desktop-toast-wrapper");
  const toastWrapper = document.querySelector(".toastWrapper");
  const closeToast = document.getElementById("closeToast");

  animate(
    wrapper,
    {
      transform: `translateX(-.5vw)`,
      opacity: 1,
    },
    {
      duration: 1.35,
      easing: [0.33, 0, 0.17, 1],
    }
  );

  closeToast.addEventListener("click", () => {
    animate(
      wrapper,
      {
        transform: `translateX(8vw) translateY(40vh) rotate(-35deg) skewX(-15deg)`,
        opacity: 1,
        // filter: ` blur(2px)`,
      },
      {
        duration: 0.6,
        delay: 0.25,
        easing: [0.215, 0.61, 0.355, 1],
      }
    ).finished.then(() => {
      toastWrapper.style.display = "none";
    });
  });

  // hide toast if within x pixels of bottom
</script>

<script>
  const countdownParent = document.querySelector(".countdown");
  const eventStatus = document.getElementById("eventStatus");

  const startDate = new Date(
    JSON.parse(countdownParent.getAttribute("data-startDate"))
  );

  const endDate = new Date(
    JSON.parse(countdownParent.getAttribute("data-endDate"))
  );

  const eventTitle = JSON.parse(
    countdownParent.getAttribute("data-eventTitle")
  );

  // Function to update the countdown based on the current date
  function updateCountdown() {
    const currentDate = new Date();
    // Adjust current date to local timezone offset
    const localCurrentDate = new Date(
      currentDate.getTime() - currentDate.getTimezoneOffset() * 60000
    );


    // Check if the current date is before the start date
    if (localCurrentDate < startDate) {
      eventStatus.innerHTML = `Join us at <span class="event-toast-title">${eventTitle}</span> in`;
      const timeRemaining = startDate - localCurrentDate;
      displayCountdown(timeRemaining, true);
    }
    // Check if the current date is between the start and end dates
    else if (localCurrentDate < endDate) {
      eventStatus.innerHTML = `We're still at <span class="event-toast-title">${eventTitle}</span> for`;
      const timeRemaining = endDate - localCurrentDate;
      displayCountdown(timeRemaining, false);
    }
    // If the current date is after the end date, display "Event is over!"
    else {
      countdownParent.textContent = "Event is over!";
    }
  }

  // Function to display the countdown in the specified format
  function displayCountdown(timeRemaining) {
    const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
      (timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor(
      (timeRemaining % (1000 * 60 * 60)) / (1000 * 60)
    );

    let countdownText = "";

    // Construct the countdown text based on remaining days, hours, and minutes
    if (days > 0) {
      countdownText += `${days} day${days > 1 || days === 0 ? "s" : ""}, `;
    }
    if (hours >= 0 && days > 0) {
      countdownText += `${hours} hour${hours > 1 || hours === 0 ? "s" : ""}, `;
    } else if (hours >= 0 && days === 0) {
      countdownText += `${hours} hour${hours > 1 || hours === 0 ? "s" : ""} `;
    }
    countdownText += `and ${minutes} minute${minutes > 1 || minutes === 0 ? "s" : ""}`;

    // Set the countdown text to the formatted string
    countdownParent.textContent = countdownText;
  }

  // Initial call to set the countdown when the page loads
  updateCountdown();

  // Update the countdown every second
  setInterval(updateCountdown, 1000);
</script>
